#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")

#@ def image_pull_secret():
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.scanner.pullSecret
  namespace: #@ data.values.namespace
type: kubernetes.io/dockerconfigjson
#@ end

#@ def placeholder():
metadata:
  #@overlay/match missing_ok=True
  annotations:
    secretgen.carvel.dev/image-pull-secret: ""
#@overlay/match missing_ok=True
data:
  .dockerconfigjson: e30K
#@ end

#@ def with_creds():
#@overlay/match missing_ok=True
data:
  #@ docker_auth = base64.encode("{}:{}".format(data.values.scanner.docker.username, data.values.scanner.docker.password))
  #@ docker_creds = {"username": data.values.scanner.docker.username, "password": data.values.scanner.docker.password, "auth": docker_auth}
  .dockerconfigjson: #@ base64.encode(json.encode({"auths": {data.values.scanner.docker.server: docker_creds}}))
#@ end

#@ if data.values.scanner.pullSecret == None:
#@ elif len(data.values.scanner.pullSecret) > 0:

#@ if data.values.scanner.docker.password == None:
--- #@ template.replace([overlay.apply(image_pull_secret(), placeholder())])
#@ elif len(data.values.scanner.docker.password) > 0:
--- #@ template.replace([overlay.apply(image_pull_secret(), with_creds())])
#@ end
#@ end
